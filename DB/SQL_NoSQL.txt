Sql_NoSql


* SQL [관계형 데이터베이스 RDBMS]
- Structured Query Language = 구조화된 쿼리 언어
- 특징
 1) 데이터는 정해진(엄격한) 데이터 스키마(= structure)를 따라 데이터베이스 테이블에 저장
  : 테이블에 record로 저장되고, 각 테이블에는 명확하게 정의된 구조가 있음
  : (구조 = 필드의 이름과 데이터의 유형으로 정의됨)
  : 때문에 스키마를 준수하지 않는 레코드는 추가할 수 없음
 2) 데이터는 관계를 통해서 연결된 여러개의 테이블에 분산
  : 데이터를 여러개의 테이블에 나누어 저장하고, 각 테이블은 다른 테이블이 저장하지 않은 데이터만을 가지고 있음

* NoSQL [비관계형 데이터베이스]
- 스키마, 관계 존재하지 않음
- 레코드를 documents 즉 문서라고 부름
- 스키마가 없기 때문에 다른 구조의 데이터를 같은 컬렉션(=SQL 에서의 테이블)에 추가할 수 있음 (documents는 JSON과 비슷한 형태를 지님)
- 테이블 즉 콜렉션의 조인이 필요하지 않고 이미 필요한 것을 모두 갖춘 문서를 작성하게 됨 (실제로 NoSQL에는 조인이라는 개념이 존재하지 않음)

* 확장의 차이
- 수직적 확장 : SQL 데이터베이스는 데이터베이스 서버의 성능을 향상시키는 방향으로 확장할 수 있음(CPU 업그레이드 등) = Scale-Up
- 수평적 확장 : NoSQL 데이터베이스는 서버를 더 추가하는 등의 수평적 확장이 가능 = Scale-Out

* SQL? NoSQL?
- SQL
 1) 장점 : 데이터의 무결성을 보장하고 모든 데이터를 중복없이 한번만 저장
 2) 단점
  : NoSQL에 비해 덜 유연
  : join이 많은 복잡한 쿼리가 만들어질 수 있음
  : 대체적으로 수직적으로 확장만이 가능하기 때문에 어떤 시점에서 성장의 한계에 직면하게 됨
- NoSQL
 1) 장점 : 스키마가 없기때문에 유연하고 데이터를 읽어오는 속도가 빠름
 2) 단점
  : 데이터 구조 결정을 미루게됨
  : 데이터가 여러 컬렉션에 중복되어있기 때문에 수정 시 모든 컬렉션에서 update 수행해야함

* SQL은 언제쓰는게 좋지?
- 관계를 맺는 데이터가 자주 수정되는 어플리케이션인 경우
- 변경될 여지가 없고 명확한 스키마가 사용자와 데이터에게 중요한 경우
- Gaming, Social, IoT, Web, Mobile, Enterprise, Key/value store, Document Database, Column family store

* NoSQL은 언제쓰는게 좋지?
- 정확한 데이터 구조를 알 수 없거나 미래에 변경/확장 가능성이 있는 경우
- 데이터의 update가 잦지 않고 read를 자주 하는 경우
- 막대한 양의 데이터를 다뤄야 하는 경우
- Web, Mobile, Enterprise, Data mart, Relational table storage, Relationships use joins

* DATABASES
- SQL : SQL Server, MySQL, Oracle, DB2, PoatgreSQL
- NoSQL : MongoDB, Hadoop, Cassandra, Riak, Couchbase


* 출처
https://brunch.co.kr/@kooslab/181
https://siyoon210.tistory.com/130